{"version":3,"sources":["components/ChessGame/withDnDContext.js","components/ChessGame/Constants.js","components/ChessGame/Knight.js","components/ChessGame/Square.js","components/ChessGame/Game.js","components/ChessGame/BoardSquare.js","components/ChessGame/Board.js","components/ChessGame/index.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["DragDropContext","MultiBackend","HTML5toTouch","ItemTypes","DragSource","beginDrag","props","objId","id","connect","monitor","connectDragSource","dragSource","isDragging","_ref","react_default","a","createElement","style","fontSize","opacity","cursor","Square","black","children","onClick","backgroundColor","color","height","width","display","flexDirection","justifyContent","alignItems","knightPosition","observer","emitChange","squareTarget","canDrop","toX","toY","_knightPosition","_knightPosition2","Object","slicedToArray","dx","dy","Math","abs","canMoveKnight","x","y","drop","console","log","getItem","renderOverlay","position","top","left","zIndex","DropTarget","connectDropTarget","dropTarget","isOver","ChessGame_Square","Row","rowIndex","size","knightPos","keys","toConsumableArray","Array","map","v","colIndex","ChessGame_BoardSquare","key","concat","_ref2","_ref3","knightX","knightY","ChessGame_Knight","renderKnight","Board","withDnDContext","_ref4","_ref4$knightPos","arr","proportion","window","innerWidth","innerHeight","border","Board_Row","App","kPos","className","ChessGame","Boolean","location","hostname","match","o","Error","observe","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.c4accd8f.chunk.js","sourcesContent":["import { DragDropContext } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport TouchBackend from \"react-dnd-touch-backend\";\nimport MultiBackend from \"react-dnd-multi-backend\";\nimport HTML5toTouch from \"react-dnd-multi-backend/lib/HTML5toTouch\";\n\nexport default DragDropContext(MultiBackend(HTML5toTouch));\n","export const ItemTypes = {\n  KNIGHT: \"knight\"\n};\n","import React from \"react\";\nimport { ItemTypes } from \"./Constants\";\nimport { DragSource } from \"react-dnd\";\n\n// drag source\nconst knightSource = {\n  beginDrag(props) {\n    return {\n      objId: props.id\n    };\n  }\n};\n\nconst collect = (connect, monitor) => {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n};\n\nconst Knight = ({ connectDragSource, isDragging }) => {\n  return connectDragSource(\n    <span\n      style={{\n        fontSize: isDragging ? \"3rem\" : \"2rem\",\n        opacity: isDragging ? 0.5 : 1,\n        cursor: \"pointer\"\n      }}\n    >\n      â™˜\n    </span>\n  );\n};\n\nexport default DragSource(ItemTypes.KNIGHT, knightSource, collect)(Knight);\n","import React from \"react\";\n\nconst Square = ({ black, children, onClick }) => {\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        backgroundColor: black ? \"black\" : \"white\",\n        color: black ? \"white\" : \"black\",\n        height: \"100%\",\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Square;\n","// http://react-dnd.github.io/react-dnd/docs/tutorial#adding-drag-and-drop-interaction\n\nlet knightPosition = [1, 7];\nlet observer = null;\n\nconst emitChange = () => {\n  observer(knightPosition);\n};\n\nexport const observe = o => {\n  if (observer) {\n    throw new Error(\"Multiple observers not implented\");\n    // if observer has already been assigned throw an error\n    // allows only one observer\n  }\n\n  // tie the observer variable to the thing it receives\n  // in this case a function\n  observer = o;\n\n  // call function that gives the observer the current result (knightPosition)\n  emitChange();\n};\n\nexport const moveKnight = (toX, toY) => {\n  knightPosition = [toX, toY]; // set new pos\n  emitChange(); // tell the observer that something has happened and give it news\n};\n\nexport const canMoveKnight = (toX, toY) => {\n  const [x, y] = knightPosition;\n  const dx = toX - x;\n  const dy = toY - y;\n\n  return (\n    (Math.abs(dx) === 2 && Math.abs(dy) === 1) ||\n    (Math.abs(dx) === 1 && Math.abs(dy) === 2)\n  );\n};\n","import React from \"react\";\nimport Square from \"./Square\";\nimport { DropTarget } from \"react-dnd\";\n\nimport { ItemTypes } from \"./Constants\";\nimport { moveKnight, canMoveKnight } from \"./Game\";\n\n// drop target\n// with a function that specifies what to do when the target is dropped\nconst squareTarget = {\n  canDrop(props) {\n    return canMoveKnight(props.x, props.y);\n  },\n  drop(props, monitor) {\n    console.log(monitor.getItem());\n    moveKnight(props.x, props.y);\n  }\n};\n\nconst collect = (connect, monitor) => {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop()\n  };\n};\n\nconst renderOverlay = color => {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        height: \"100%\",\n        width: \"100%\",\n        zIndex: 1,\n        opacity: 0.5,\n        backgroundColor: color\n      }}\n    />\n  );\n};\n\nconst BoardSquare = ({\n  x,\n  y,\n  connectDropTarget,\n  isOver,\n  canDrop,\n  onClick,\n  children\n}) => {\n  const black = (x + y) % 2 === 1;\n  return connectDropTarget(\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\n      <Square black={black} onClick={onClick}>\n        {children}\n      </Square>\n      {isOver && !canDrop && renderOverlay(\"red\")}\n      {!isOver && canDrop && renderOverlay(\"yellow\")}\n      {isOver && canDrop && renderOverlay(\"green\")}\n    </div>\n  );\n};\n\nexport default DropTarget(ItemTypes.KNIGHT, squareTarget, collect)(BoardSquare);\n","import React, { useState } from \"react\";\nimport withDnDContext from \"./withDnDContext\";\n\nimport Knight from \"./Knight\";\nimport BoardSquare from \"./BoardSquare\";\n//import { moveKnight, canMoveKnight } from \"./Game\";\n\n// const handleSquareClick = (toX, toY) =>\n//   canMoveKnight(toX, toY) && moveKnight(toX, toY);\n\nconst Row = ({ rowIndex, size, knightPos }) => {\n  const arr = Object.keys([...Array(size)]);\n\n  const sqs = arr.map((v, colIndex) => {\n    const renderKnight = (x, y, [knightX, knightY]) => {\n      const isKnight = knightX === x && knightY === y;\n      if (isKnight) return <Knight />;\n    };\n\n    return (\n      <BoardSquare\n        x={rowIndex}\n        y={colIndex}\n        key={`col-${colIndex}`}\n        //onClick={() => handleSquareClick(rowIndex, colIndex)}\n      >\n        {renderKnight(rowIndex, colIndex, knightPos)}\n        <small>{`${rowIndex}, ${colIndex}`}</small>\n      </BoardSquare>\n    );\n  });\n\n  return sqs;\n};\n\nconst Board = ({ knightPos = [0, 0] }) => {\n  const size = 8;\n  const arr = Object.keys([...Array(size)]);\n  const proportion = window.innerWidth / window.innerHeight;\n\n  return (\n    <div\n      style={{\n        height: proportion > 1 ? \"90vh\" : \"90vw\",\n        width: proportion > 1 ? \"90vh\" : \"90vw\",\n        border: \"1px solid black\",\n        display: \"flex\",\n        flexDirection: \"column\"\n      }}\n    >\n      {arr.map((v, rowIndex) => (\n        <div\n          key={`row-${rowIndex}`}\n          style={{ display: \"flex\", height: \"100%\", width: \"100%\" }}\n        >\n          <Row rowIndex={rowIndex} size={size} knightPos={knightPos} />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default withDnDContext(Board);\n","import Board from \"./Board\";\n\nexport default Board;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport ChessGame from \"./components/ChessGame\";\n\nfunction App({ kPos }) {\n  return (\n    <div className=\"App\">\n      <ChessGame knightPos={kPos} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { observe } from \"./components/ChessGame/Game\";\n\nobserve(kPos => {\n  ReactDOM.render(<App kPos={kPos} />, document.getElementById(\"root\"));\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}